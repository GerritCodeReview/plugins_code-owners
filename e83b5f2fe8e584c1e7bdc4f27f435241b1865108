{
  "comments": [
    {
      "key": {
        "uuid": "37275c9e_0a7166a4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-20T07:48:17Z",
      "side": 1,
      "message": "Do you mean as part of preloading in index.html? We do know which plugins are active there.\n\nFor the rest we know if it was enabled per-host, but not per-project, so you\u0027d always have to request it.\n\nWhat happens if a caller requests the option, but the plugin is not enabled for the project? If that\u0027s a cheap early return, we could always request it?",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 70,
        "endChar": 9
      },
      "revId": "e83b5f2fe8e584c1e7bdc4f27f435241b1865108",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bdefa57_2e3c78ee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-07-20T11:10:12Z",
      "side": 1,
      "message": "\u003e Do you mean as part of preloading in index.html? We do know which plugins are active there.\nSorry, I don\u0027t know the details. I just was told that this was an issue with the checks plugin. Hence we follow the example of the checks plugin to avoid this issue. AFAIK nothing has changed which would have made this issue go away. I guess Alice knows more.\n\n\u003e If that\u0027s a cheap early return, we could always request it?\n\nIf the plugin is not loaded yet, the core frontend doesn\u0027t know that such a plugin option exists and hence it cannot request it.\n\nOn server side we don\u0027t want to return this info for all change requests, because computing the file statuses is rather expensive and many callers will not need this info.",
      "parentUuid": "37275c9e_0a7166a4",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 70,
        "endChar": 9
      },
      "revId": "e83b5f2fe8e584c1e7bdc4f27f435241b1865108",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "904844d1_4d12e993",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-07-27T13:08:33Z",
      "side": 1,
      "message": "Edwin already mentioned all important aspects. I\u0027m just providing some additional context on the checks plugin and our struggles with query options.\n\nWe use a ChangeAttribute [1] to return additional data as part of GetChange calls (QueryChanges, GetDetail). Thus, callers can decide whether they need the additional data or not. In the latter case, they can avoid unnecessary computations (-\u003e unchanged latencies for existing callers).\n\nThe issue with this approach, though, is that we need to send the correct attribute/option along when making the GetDetail call on the change page and the QueryChanges call on the dashboard. Our original plan was to use the frontend part of the plugin to provide the attribute/option. However, the frontend part of the plugins is not loaded yet when the calls occur. We didn\u0027t want to change this as waiting for the plugins to load would increase the latency of the dashboard or the change page. We also didn\u0027t want to introduce anything which would conflict with preloading.\n\nWe toyed with the idea of including plugin options with a page indication in index.html but didn\u0027t get further than discussing it as one of the possible solutions.\n\n[1] https://gerrit-review.googlesource.com/c/plugins/checks/+/218064",
      "parentUuid": "6bdefa57_2e3c78ee",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 70,
        "endChar": 9
      },
      "revId": "e83b5f2fe8e584c1e7bdc4f27f435241b1865108",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb1140c0_78bf13d8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-28T15:00:07Z",
      "side": 1,
      "message": "Thanks for the context.\n\nWe now inline most (all?) options for prefetching queries in index.html, so we could offer a backend API endpoint that allows to specify additional parameters for a given context (search, dashboard, details) that the frontend could then send along.\n\nBut this shouldn\u0027t block this change.",
      "parentUuid": "904844d1_4d12e993",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 70,
        "endChar": 9
      },
      "revId": "e83b5f2fe8e584c1e7bdc4f27f435241b1865108",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e95dad9a_4f7ff480",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-07-29T06:31:21Z",
      "side": 1,
      "message": "That\u0027s an idea that we should reconsider at a later point in time. It might be worth it.",
      "parentUuid": "cb1140c0_78bf13d8",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 70,
        "endChar": 9
      },
      "revId": "e83b5f2fe8e584c1e7bdc4f27f435241b1865108",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03eeb06a_ffc0cd08",
        "filename": "java/com/google/gerrit/plugins/codeowners/api/CodeOwnerStatusInfo.java",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-20T07:48:17Z",
      "side": 1,
      "message": "I think it would be better to just follow the established practice of making this a per-patch set endpoint to avoid the race.\n\nThis way, we are forcing callers to send a second request if they detect a race and to detect a race in the first place. If we built it as a revision endpoint, there\u0027d be no races. There is also a complexity cost involved here: With the current implementation, one has to know, read or otherwise find out that there might be races. For your UI, that might be OK, but for robot callers that others write, this presents a trap that is too easy to fall into.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 33,
        "endChar": 28
      },
      "revId": "e83b5f2fe8e584c1e7bdc4f27f435241b1865108",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bd10a12_ff97d11c",
        "filename": "java/com/google/gerrit/plugins/codeowners/api/CodeOwnerStatusInfo.java",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-07-20T11:10:12Z",
      "side": 1,
      "message": "Computing file statuses for non-current patch sets makes no sense hence we do not provide this.\nE.g. which votes would you consider to compute them? The latest votes, or the votes that were present before the successor patch set was uploaded? In the first case somebody looked at the latest patch set and implicitly approved a file modification in an old patch set that they didn\u0027t see. In the second case what\u0027s the meaning of status \u0027PENDING\u0027 approval if an approval can never be granted on the old patch set?\n\nI think we could offer this REST endpoint on revision level and let it fail if it\u0027s called for a non-current patch set. Did you mean this?\n\n\u003e If we built it as a revision endpoint, there\u0027d be no races. \nThere is still the same race, but the failure would require the caller to handle this case, so this may be better because of that?",
      "parentUuid": "03eeb06a_ffc0cd08",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 33,
        "endChar": 28
      },
      "revId": "e83b5f2fe8e584c1e7bdc4f27f435241b1865108",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fce41f4_61ee2537",
        "filename": "java/com/google/gerrit/plugins/codeowners/api/CodeOwnerStatusInfo.java",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-07-20T11:16:51Z",
      "side": 1,
      "message": "Basically this REST endpoint tells you which code owner approvals you need to make the change submittable.\nOld revisions are never submittable, hence asking which code owner approvals you need to make the old revision submittable makes no sense.",
      "parentUuid": "9bd10a12_ff97d11c",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 33,
        "endChar": 28
      },
      "revId": "e83b5f2fe8e584c1e7bdc4f27f435241b1865108",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61406520_3b7b1f26",
        "filename": "java/com/google/gerrit/plugins/codeowners/restapi/CodeOwnerStatusInfoJson.java",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-20T07:48:17Z",
      "side": 1,
      "message": "throw new IllegalStateException(\"got neither oldPath, nor newPath\")",
      "range": {
        "startLine": 48,
        "startChar": 12,
        "endLine": 49,
        "endChar": 22
      },
      "revId": "e83b5f2fe8e584c1e7bdc4f27f435241b1865108",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "384ccd62_42ea4d95",
        "filename": "java/com/google/gerrit/plugins/codeowners/restapi/CodeOwnerStatusInfoJson.java",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-07-20T11:16:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61406520_3b7b1f26",
      "range": {
        "startLine": 48,
        "startChar": 12,
        "endLine": 49,
        "endChar": 22
      },
      "revId": "e83b5f2fe8e584c1e7bdc4f27f435241b1865108",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}