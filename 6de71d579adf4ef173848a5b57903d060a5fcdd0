{
  "comments": [
    {
      "key": {
        "uuid": "44a3bf02_2a5b65ce",
        "filename": "java/com/google/gerrit/plugins/codeowners/testing/CodeOwnerIterableSubject.java",
        "patchSetId": 18
      },
      "lineNbr": 37,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-06-23T10:23:36Z",
      "side": 1,
      "message": "FYI: Even though IterableSubject is extendable and we have also extended it for ListSubject, I don\u0027t think that the Truth team envisioned that IterableSubject should be extended for every custom subject type. Guessing your intentions with creating this class and guessing how the Truth team meant Correspondences to be used, I think you would want to just have a container class which defines the Correspondences with constants (and possible static methods for nicer names).\n\nI saw that a previous reviewer accepted this approach of introducing xxxIterableSubjects. Hence, I won\u0027t push for an adjustment in this part of the code base. Just please don\u0027t use the exact same approach in other parts of Gerrit.",
      "range": {
        "startLine": 37,
        "startChar": 13,
        "endLine": 37,
        "endChar": 37
      },
      "revId": "6de71d579adf4ef173848a5b57903d060a5fcdd0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e580b70c_f37a6b4b",
        "filename": "java/com/google/gerrit/plugins/codeowners/testing/CodeOwnerIterableSubject.java",
        "patchSetId": 18
      },
      "lineNbr": 37,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-23T13:33:19Z",
      "side": 1,
      "message": "Thanks, I agree that this approach doesn\u0027t scale well and I\u0027m happy to learn more and find a better solution.\n\nFor the time being, I see it as an acceptable overhead for being able to write readable tests.\n\nCodeOwnerIterableSubject as I have it now allows me to write:\n\n  assertThat(codeOwners))\n        .hasAccountIdsThat()\n        .containsExactly(admin.id(), user.id());\n\nIf I would only have a static Correspondence the assertion would need to look like this:\n\n  assertThat(codeOwners))\n    .comparingElementsUsing(CodeOwnerCorrespondences.CODE_OWNER_TO_ACCOUNT_ID)\n    .containsExactly(admin.id(), user.id());\n\nwhich I find less readable.\n\nDo I understand correctly that you propose to have a static method like\n\n  static UsingCorrespondence\u003cCodeOwner, Account.Id\u003e assertAccountIdsOf(Iterable\u003cCodeOwner\u003e codeOwners) {\n    return assertThat(codeOwnerSet))\n             .comparingElementsUsing(CodeOwnerCorrespondences.CODE_OWNER_TO_ACCOUNT_ID);\n  }\n\nand then have \n\n  assertAccountIdsOf(codeOwners).containsExactly(admin.id(), user.id());\n\n?\n\nOr did you mean something else?\n\nIn any case, since there is already a long open series on top of this change and I\u0027m afraid this change would cause rebase churn, I would rather go with the current approach for now. But I\u0027m fine with addressing this on top of the series.",
      "parentUuid": "44a3bf02_2a5b65ce",
      "range": {
        "startLine": 37,
        "startChar": 13,
        "endLine": 37,
        "endChar": 37
      },
      "revId": "6de71d579adf4ef173848a5b57903d060a5fcdd0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0818ce65_d020f98d",
        "filename": "java/com/google/gerrit/plugins/codeowners/testing/CodeOwnerIterableSubject.java",
        "patchSetId": 18
      },
      "lineNbr": 37,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-06-23T14:54:07Z",
      "side": 1,
      "message": "I meant using something like\n\n  assertThat(codeOwners)\n      .comparingElementsUsing(HAS_ACCOUNT_ID)\n      .containsExactly(admin.id(), user.id());\n\nor something like\n\n  assertThat(codeOwners)\n      .comparingElementsUsing(hasAccountId())\n      .containsExactly(admin.id(), user.id());\n\nwhich would be enabled by a static import of HAS_ACCOUNT_ID / hasAccountId(). I agree that it\u0027s a bit less readable than assertThat(codeOwners)).hasAccountIdsThat() but it seems to be the solution the Truth team has settled upon. If you prefer the custom subjects for the plugin, we can also keep them in the future.\n\nI know the merge/rebase pain very well myself and understand your point. Let\u0027s stick with the current approach for the rest of this series.",
      "parentUuid": "e580b70c_f37a6b4b",
      "range": {
        "startLine": 37,
        "startChar": 13,
        "endLine": 37,
        "endChar": 37
      },
      "revId": "6de71d579adf4ef173848a5b57903d060a5fcdd0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f64cda03_26ef6b45",
        "filename": "java/com/google/gerrit/plugins/codeowners/testing/CodeOwnerIterableSubject.java",
        "patchSetId": 18
      },
      "lineNbr": 37,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-23T14:59:27Z",
      "side": 1,
      "message": "OK, if this makes us compliant with how Truth intends this to be done, then we should probably do this. Your second version looks quite OK to me. I will give it a try :)",
      "parentUuid": "0818ce65_d020f98d",
      "range": {
        "startLine": 37,
        "startChar": 13,
        "endLine": 37,
        "endChar": 37
      },
      "revId": "6de71d579adf4ef173848a5b57903d060a5fcdd0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4491ebdf_db258d97",
        "filename": "java/com/google/gerrit/plugins/codeowners/testing/CodeOwnerIterableSubject.java",
        "patchSetId": 18
      },
      "lineNbr": 43,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-06-23T10:23:36Z",
      "side": 1,
      "message": "We could use a Correspondence#transforming here and thus wouldn\u0027t need line 47. In general, I\u0027m seeing the pattern in several subject implementations of this code area which allows to map null values within Correspondences. I\u0027m wondering if we shouldn\u0027t introduce a Correspondence implementation, which is based on Correspondence#transforming and adds the null behavior. As input, it would just get a method reference and a string for the failure description. Afterwards, we could would just have one line here and in the other subjects.",
      "range": {
        "startLine": 43,
        "startChar": 6,
        "endLine": 43,
        "endChar": 25
      },
      "revId": "6de71d579adf4ef173848a5b57903d060a5fcdd0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87983571_887b8914",
        "filename": "java/com/google/gerrit/plugins/codeowners/testing/CodeOwnerIterableSubject.java",
        "patchSetId": 18
      },
      "lineNbr": 43,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-23T13:33:19Z",
      "side": 1,
      "message": "Thanks for the suggestion. I assume this is something that should be done in Gerrit core since we use the same pattern there too. I can follow-up on this and adapt the code here (in a follow-up change) once we have that class in Gerrit core available.",
      "parentUuid": "4491ebdf_db258d97",
      "range": {
        "startLine": 43,
        "startChar": 6,
        "endLine": 43,
        "endChar": 25
      },
      "revId": "6de71d579adf4ef173848a5b57903d060a5fcdd0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7b96ddc_22dd5b8a",
        "filename": "java/com/google/gerrit/plugins/codeowners/testing/CodeOwnerIterableSubject.java",
        "patchSetId": 18
      },
      "lineNbr": 43,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-06-23T14:54:07Z",
      "side": 1,
      "message": "Yeah, I wasn\u0027t aware that core Gerrit also used the same pattern. I agree that we should add it to core Gerrit then.",
      "parentUuid": "87983571_887b8914",
      "range": {
        "startLine": 43,
        "startChar": 6,
        "endLine": 43,
        "endChar": 25
      },
      "revId": "6de71d579adf4ef173848a5b57903d060a5fcdd0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a91a53d9_d10f7356",
        "filename": "java/com/google/gerrit/plugins/codeowners/testing/CodeOwnerIterableSubject.java",
        "patchSetId": 18
      },
      "lineNbr": 43,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-23T14:59:27Z",
      "side": 1,
      "message": "OK, I try to find some time to add this in Gerrit core.",
      "parentUuid": "f7b96ddc_22dd5b8a",
      "range": {
        "startLine": 43,
        "startChar": 6,
        "endLine": 43,
        "endChar": 25
      },
      "revId": "6de71d579adf4ef173848a5b57903d060a5fcdd0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}