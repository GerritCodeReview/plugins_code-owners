{
  "comments": [
    {
      "key": {
        "uuid": "01830d9a_bbda9ee3",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwner.java",
        "patchSetId": 14
      },
      "lineNbr": 30,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2020-06-12T13:49:39Z",
      "side": 1,
      "message": "Does it make sense to have CodeOwners with one method called \"id\", and then have CodeOwnerAccount (and later maybe CodeOwnerGroup) that implement CodeOwners?\n\nI can see the problem here being inability to tell those classes apart when resolving the account/group, which will require \"if(x instanceof X)\", which is not great.\n\nThis is just some idea on top of my mind, cause the way this will scale is having CodeOwners having both \"accountId\" and \"groupId\" forcing only one of them to be not null, which I think is not great, unless you have another idea on how to extend it?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 30,
        "endChar": 0
      },
      "revId": "9f5df72d97b5fade653916d5d6667a23c6fb7985",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b39cf73f_d59e4bdd",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwner.java",
        "patchSetId": 14
      },
      "lineNbr": 30,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-12T14:26:02Z",
      "side": 1,
      "message": "\u003e Does it make sense to have CodeOwners with one method called \"id\"\nWhich type would be returned by this method and how would we use this method?\n\nMy idea to extend this class is having 2 optional fields where at most one is set:\n\n  public abstract Optional\u003cAccount.Id\u003e accountId();\n  public abstract Optional\u003cAccountGroup.UUID\u003e groupUuid();\n\nThis means since we have Optionals we will not need to deal with null values.\nThe constraint that only one of the fields is set can be verified in the Builder on build, so there is no possibility that someone sets no or more than one field. Anyway callers will use one of the create methods here, which will automatically set the correct field.\n\nCodeOwnerResolver needs to check and differentiate whether it\u0027s an account or group, but checking codeOwner.accountId().isPresent() looks nicer to me than checking instanceof CodeOwnerAccount (at best it\u0027s no difference, but with the optional fields we save the overhead of implementing subclasses). So I prefer this approach over having an abstract class with multiple subclasses. \n\nWe will see how this works when we implement support for groups and can still reconsider then. Group support is not part of the initial version and it\u0027s uncertain when/if we will work on this (quite likely not this year). That\u0027s why I don\u0027t want spent much time on this now.\n\nFor now this class is consistent with CodeOwnerReference which will follow the same pattern with using Optional fields if we want to support something other than email. If we would go for subclasses here, for consistency reasons we would need to switch to subclasses there too.\n\nAnother argument for the current class design is that it also matches the structure of the JSON entity that we will return to the client (CodeOwnerInfo will have 2 optional fields, one for AccountInfo and one for GroupInfo where only one is set).",
      "parentUuid": "01830d9a_bbda9ee3",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 30,
        "endChar": 0
      },
      "revId": "9f5df72d97b5fade653916d5d6667a23c6fb7985",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b20f501_2faf9f5e",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwner.java",
        "patchSetId": 14
      },
      "lineNbr": 30,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2020-06-12T14:34:57Z",
      "side": 1,
      "message": "thanks for explaining :)",
      "parentUuid": "b39cf73f_d59e4bdd",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 30,
        "endChar": 0
      },
      "revId": "9f5df72d97b5fade653916d5d6667a23c6fb7985",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "791dc1ea_c08917cc",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwnerResolver.java",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2020-06-12T13:49:39Z",
      "side": 1,
      "message": "why?\nI guess because we ignore invalid lines in the config file, which is not completely relevant to the class. Up to you if you want to mention that.",
      "range": {
        "startLine": 54,
        "startChar": 36,
        "endLine": 54,
        "endChar": 53
      },
      "revId": "9f5df72d97b5fade653916d5d6667a23c6fb7985",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "249a0247_c9917a65",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwnerResolver.java",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-12T14:26:02Z",
      "side": 1,
      "message": "It\u0027s not because we ignore invalid lines in the parser (upper layers don\u0027t know about the existence of these lines, since the parser ignores them). A non-resolveable email in a code owners config file is a valid line which has no effect. We filter them out here, since they have no effect.",
      "parentUuid": "791dc1ea_c08917cc",
      "range": {
        "startLine": 54,
        "startChar": 36,
        "endLine": 54,
        "endChar": 53
      },
      "revId": "9f5df72d97b5fade653916d5d6667a23c6fb7985",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4598b65_b2b8cb4d",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwnerResolver.java",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-06-15T13:23:01Z",
      "side": 1,
      "message": "Maybe add this (\"because they are valid, but have no effect\") to the Java Doc?",
      "parentUuid": "249a0247_c9917a65",
      "range": {
        "startLine": 54,
        "startChar": 36,
        "endLine": 54,
        "endChar": 53
      },
      "revId": "9f5df72d97b5fade653916d5d6667a23c6fb7985",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a15af42a_a640654c",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwnerResolver.java",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-15T15:53:01Z",
      "side": 1,
      "message": "Rephrased the javadoc to make this clearer.",
      "parentUuid": "b4598b65_b2b8cb4d",
      "range": {
        "startLine": 54,
        "startChar": 36,
        "endLine": 54,
        "endChar": 53
      },
      "revId": "9f5df72d97b5fade653916d5d6667a23c6fb7985",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}