{
  "comments": [
    {
      "key": {
        "uuid": "b77c3c5b_5d32ba67",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoring.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2020-06-18T11:18:16Z",
      "side": 1,
      "message": "I\u0027m confused: you mentioned scoring has to be between 0.0 - 1.0.\nOn the other hand, in the tests I see scores such as 20 and 50.\nCan we somehow make this less confusing by only using one type of scale?",
      "range": {
        "startLine": 39,
        "startChar": 51,
        "endLine": 39,
        "endChar": 58
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87e0727e_570c7c60",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoring.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-18T11:31:14Z",
      "side": 1,
      "message": "\u003e I\u0027m confused: you mentioned scoring has to be between 0.0 - 1.0.\n\nThe final scoring which is computed by the scoring(CodeOwner) method is between 0.0-1.0, this is also where this is documented. The values here are the raw non-scaled values (not between 0.0 - 1.0). I can extend the javadoc here to make it clearer that these are the raw non-scaled values. Would that resolve your confusion?",
      "parentUuid": "b77c3c5b_5d32ba67",
      "range": {
        "startLine": 39,
        "startChar": 51,
        "endLine": 39,
        "endChar": 58
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ed097ae_9798490f",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoring.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2020-06-18T11:37:13Z",
      "side": 1,
      "message": "sure.\nAlthough, is it possible to rather make all values be between 0.0-1.0?\nThis way you won\u0027t need to divide bestValue by maxValue, and I think it will be more consistent this way.",
      "parentUuid": "87e0727e_570c7c60",
      "range": {
        "startLine": 39,
        "startChar": 51,
        "endLine": 39,
        "endChar": 58
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24556c66_965d9429",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoring.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-18T12:27:52Z",
      "side": 1,
      "message": "\u003e Although, is it possible to rather make all values be between 0.0-1.0?\n\nYes, this would be possible and I actually thought about this.\nI didn\u0027t do this because I want to keep all details, so that I can easily return them to the frontend if needed. We don\u0027t know yet, if scores should be shown in the UI, but this topic is brought up and discussed frequently and I believe it\u0027s likely we want to do something in this direction. E.g. I could imagine that the UI wants to show that the distance for the one code owner is 3 folders and for the other code owner it is 5 folders. Then we will need to have the unscaled values.\n\n\u003e This way you won\u0027t need to divide bestValue by maxValue, and I think it will be more consistent this way.\n\nBut then I need to do value / maxValue right when the value is added, so it doesn\u0027t avoid doing this operation.",
      "parentUuid": "8ed097ae_9798490f",
      "range": {
        "startLine": 39,
        "startChar": 51,
        "endLine": 39,
        "endChar": 58
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc3a49df_b1e760a0",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoring.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2020-06-18T12:33:15Z",
      "side": 1,
      "message": "Got it, thanks for clarifying!",
      "parentUuid": "24556c66_965d9429",
      "range": {
        "startLine": 39,
        "startChar": 51,
        "endLine": 39,
        "endChar": 58
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6aefe894_051a3b73",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoring.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-18T12:34:55Z",
      "side": 1,
      "message": "I guess it\u0027s something that I can add to the commit message.",
      "parentUuid": "cc3a49df_b1e760a0",
      "range": {
        "startLine": 39,
        "startChar": 51,
        "endLine": 39,
        "endChar": 58
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f21c7b4_23687f1e",
        "filename": "java/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoring.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-19T09:42:39Z",
      "side": 1,
      "message": "I add this explaination to the javadoc of this field now.\n\nDone.",
      "parentUuid": "6aefe894_051a3b73",
      "range": {
        "startLine": 39,
        "startChar": 51,
        "endLine": 39,
        "endChar": 58
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a374c55f_10d078d4",
        "filename": "javatests/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoringTest.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2020-06-18T11:18:16Z",
      "side": 1,
      "message": "Does it make sense to allow this? Maybe override the previous/worse value?",
      "range": {
        "startLine": 39,
        "startChar": 14,
        "endLine": 39,
        "endChar": 47
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc4ac137_b3b3f205",
        "filename": "javatests/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoringTest.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-18T11:31:14Z",
      "side": 1,
      "message": "I considered this, but it\u0027s harder to implement, because we have a builder that collects the values and the builder cannot easily read the previous value to check if it was worse. I could try changing this, but not sure if the code will be nicer.",
      "parentUuid": "a374c55f_10d078d4",
      "range": {
        "startLine": 39,
        "startChar": 14,
        "endLine": 39,
        "endChar": 47
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2743b00_3ee9bbde",
        "filename": "javatests/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoringTest.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2020-06-18T11:37:13Z",
      "side": 1,
      "message": "Ack\nNot that big of deal imo, just wanted to make sure you considered it.",
      "parentUuid": "dc4ac137_b3b3f205",
      "range": {
        "startLine": 39,
        "startChar": 14,
        "endLine": 39,
        "endChar": 47
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed73b62a_83c73a5d",
        "filename": "javatests/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoringTest.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-18T12:27:52Z",
      "side": 1,
      "message": "I can still give it a try, and see how it looks in the end.",
      "parentUuid": "a2743b00_3ee9bbde",
      "range": {
        "startLine": 39,
        "startChar": 14,
        "endLine": 39,
        "endChar": 47
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0ab0108_9fbbeb2a",
        "filename": "javatests/com/google/gerrit/plugins/codeowners/backend/CodeOwnerScoringTest.java",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-06-19T09:42:39Z",
      "side": 1,
      "message": "I tried this out, but I wasn\u0027t able to get this implemented nicely. I added the reasoning for storing multiple values per code owner to the javadoc of the values field in CodeOwnerScoring, as it\u0027s likely that other people have the same question.",
      "parentUuid": "ed73b62a_83c73a5d",
      "range": {
        "startLine": 39,
        "startChar": 14,
        "endLine": 39,
        "endChar": 47
      },
      "revId": "b2bef382e5ad252642be98d8bead04a779c14a2c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}