{
  "comments": [
    {
      "key": {
        "uuid": "2b204999_03ac5b23",
        "filename": "java/com/google/gerrit/plugins/codeowners/restapi/GetCodeOwnersForPathInBranch.java",
        "patchSetId": 16
      },
      "lineNbr": 151,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-06-24T15:32:52Z",
      "side": 1,
      "message": "By having two methods here, we generate a Stream, map it to an ImmutableList, create a Stream from it, and then generate an ImmutableList again. I would combine those two methods and just have one Stream on which we also impose the limit before we generate the resulting ImmutableList.",
      "range": {
        "startLine": 151,
        "startChar": 16,
        "endLine": 151,
        "endChar": 36
      },
      "revId": "f87c43963a6caa5cf58a76628f73f29e57a18a1a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3506aa84_93531e66",
        "filename": "javatests/com/google/gerrit/plugins/codeowners/acceptance/api/GetCodeOwnersForPathInBranchIT.java",
        "patchSetId": 16
      },
      "lineNbr": 417,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-06-24T15:32:52Z",
      "side": 1,
      "message": "Optional: Could use ListSubject#element(0) instead.",
      "range": {
        "startLine": 417,
        "startChar": 4,
        "endLine": 417,
        "endChar": 56
      },
      "revId": "f87c43963a6caa5cf58a76628f73f29e57a18a1a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93291d65_4e5d0aa3",
        "filename": "javatests/com/google/gerrit/plugins/codeowners/acceptance/api/GetCodeOwnersForPathInBranchIT.java",
        "patchSetId": 16
      },
      "lineNbr": 418,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-06-24T15:32:52Z",
      "side": 1,
      "message": "You could express the same without introducing a new method on the subject:\n\n  .hasAccountIdThat()\n  .isAnyOf(user.id(), user2.id());",
      "range": {
        "startLine": 418,
        "startChar": 8,
        "endLine": 418,
        "endChar": 66
      },
      "revId": "f87c43963a6caa5cf58a76628f73f29e57a18a1a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97181864_b3e0f3d5",
        "filename": "javatests/com/google/gerrit/plugins/codeowners/backend/CodeOwnerConfigHierarchyTest.java",
        "patchSetId": 16
      },
      "lineNbr": 34,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-06-24T15:32:52Z",
      "side": 1,
      "message": "Unrelated to this change: We should use the MockitoRule which does some additional sanity tests around stubbing and Mockito usage. The mocks can also be created with an annotation. That\u0027s the code I\u0027m thinking of:\n\n  @Rule\n  public final MockitoRule mockito \u003d MockitoJUnit.rule();\n\n  @Mock\n  private CodeOwnerConfigVisitor visitor;\n\nand we should also consider whether we want the use the strictness mode as the Javadoc suggests (e.g. MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);).\n\nAs this aspect is unrelated, I don\u0027t think we should fix it within this change. Would you mind creating a follow-up change for it?",
      "range": {
        "startLine": 34,
        "startChar": 13,
        "endLine": 34,
        "endChar": 41
      },
      "revId": "f87c43963a6caa5cf58a76628f73f29e57a18a1a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "304fec04_dce6a6a9",
        "filename": "resources/Documentation/rest-api.md",
        "patchSetId": 16
      },
      "lineNbr": 72,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-06-24T15:32:52Z",
      "side": 1,
      "message": "Is there a use case for not always limiting the number of code owners? What if we chose a default of 10 or 20 and always limited the number of results? If a caller really needs more results, they can choose a higher number and could even use something like 1,000,000 which would be similar to unlimited. I would then reject 0 limits.",
      "range": {
        "startLine": 72,
        "startChar": 91,
        "endLine": 72,
        "endChar": 127
      },
      "revId": "f87c43963a6caa5cf58a76628f73f29e57a18a1a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}